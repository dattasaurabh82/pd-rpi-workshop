1) Download an image and unzip it
2) Use Qemu to load a virtual machine running your image
3) Install necessary packages
4) Enable SSH, setup a static IP
5) Copy workshop files to /home/pi (git clone)
6) Install it to your SD card

  i) format it to FAT32
  ii) install the image on it

7) Test Pd, output, input and controllers
8) Setup a Pd patch to load at startup


Images
---------

http://www.raspberrypi.org/downloads


http://pd-la.info/pdpi/


Other image with pd-extended :

https://ccrma.stanford.edu/~eberdahl/Satellite/


SD card setup
---------------

Run df -h to see what devices are currently mounted
Insert the SD card.
Run df -h
The device that wasn't there last time is your SD card. The left column gives the device name of your SD card. It will be listed as something like "/dev/mmcblk0p1" or "/dev/sdd1". The last part ("p1" or "1" respectively) is the partition number, but you want to write to the whole SD card, not just one partition, so you need to remove that part from the name (getting for example "/dev/mmcblk0" or "/dev/sdd") as the device for the whole SD card.
Unmount all partitions
dd bs=4M if=~/wheezy-raspbian.img of=/dev/<your device name>

http://elinux.org/RPi_Easy_SD_Card_Setup

dcfldd can be nice as it outputs the status of operation

At first start-up : RPI menu, change the user password and change keyboard layout if necessary.


Virtualize with qemu
---------------------

Install



Commands

$ file ~/qemu_vms/2013-02-09-wheezy-raspbian.img
From the output of the file command, take the partition 2 'startsector' value an multiply by 512, and use this figure as the offset value in the mount command below.
$ sudo mount ~/qemu_vms/2013-02-09-wheezy-raspbian.img -o offset=62914560 /mnt
$ sudo nano /mnt/etc/ld.so.preload
Comment out the line in the file (use a # as the first character of the line) and save the file (CTRL+X, then "Y" for yes).
$ sudo umount ~/qemu_vms/2013-02-09-wheezy-raspbian.img /mnt
$ cd ~/qemu_vms/
$ qemu-system-arm -kernel kernel-qemu -cpu arm1176 -m 256 -M versatilepb -no-reboot -serial stdio -append "root=/dev/sda2 panic=1" -hda ~/qemu_vms/2013-02-09-wheezy-raspbian.img -redir tcp:5022::22

If it says that loading failed, and asks you to run fsck, just do it (fsck /dev/sda2) and restart when done.

http://www.raspberrypi.org/phpBB3/viewtopic.php?f=29&t=37386


Necessary packages
---------------------

sudo apt-get update
sudo apt-get install pure-data
sudo apt-get install pd-hid
sudo apt-get install git


ethernet connection
--------------------

1) set static IP on the PI
2) set static IP on your computer in the same network
3) trying pinging the PI
4) if success, run

    ssh pi@<the IP you chose for your PI>

setting static IP on RPI

http://elinux.org/RPi_Setting_up_a_static_IP_in_Debian

setting static IP on ubuntu, through network manager top right of the screen "edit connections".

settup ssh on RPI 

http://cplus.about.com/od/raspberrypi/a/How-Do-I-Setup-Ssh-On-Raspberry-Pi.htm


Shutting down the PI through SSH
---------------------------------

sudo shutdown -h now



Connecting a usb audio interface
=================================

troubleshooting : http://wiki.linuxaudio.org/wiki/raspberrypi

Sound check
------------

copy file `soundcheck.pd` to directory `/home/pi` on your RPI. Plug the sound output to some speaker or headphones, and run :

```
pd -nogui soundcheck.pd
```

With the usb interface, first print device list :

```
pd -nogui -listdev
```

Then `ctrl+c` to stop pd. Note the number of your output device and the start again pd this time telling it what device you want to use for output. For example my usb dongle output is device number 3 :

```
pd -nogui -audiooutdev 3 soundcheck.pd
```


Mic check
----------

copy file `miccheck.pd` to directory `/home/pi` on your RPI.

To get the device number of your usb interface input, run : 

```
pd -nogui -listdev
```

Then, start pd specifying sound input and sound output (because you presumably want the input/output to go through the same usb device), and optionally the number of channels (my usb dongle only works with 1 channel) :

```
pd -nogui -audiodev 3 -inchannels 1 miccheck.pd
```


Controller
=============

Install pd-hid on your laptop if you don't have it.

Making sure you have permissions


Managing permissions
---------------------

http://puredata.info/docs/tutorials/HowToReadHIDDevicesInLinuxWithoutBeingRoot/


Testing a mouse controller
----------------------------

To listen to the events from a device, you will need its number. To print all connected devices, execute :

```
pd -nogui controllercheck.pd
```

Write down the number of your mouse, and now execute (my mouse is device 4) :

```
pd -send ";deviceNum 4" -nogui controllercheck.pd
```


Auto login
============

http://elinux.org/RPi_Debian_Auto_Login
